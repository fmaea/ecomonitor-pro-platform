import { MigrationInterface, QueryRunner, Table, TableForeignKey, TableColumn } from "typeorm";

export class CreateResourcesAndTagsTables1677600000000 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        // Create 'tags' table
        await queryRunner.createTable(new Table({
            name: "tags",
            columns: [
                {
                    name: "id",
                    type: "int",
                    isPrimary: true,
                    isGenerated: true,
                    generationStrategy: "increment",
                },
                {
                    name: "name",
                    type: "varchar",
                    length: "100",
                    isUnique: true,
                },
                {
                    name: "createdAt",
                    type: "timestamp with time zone",
                    default: "CURRENT_TIMESTAMP",
                },
                {
                    name: "updatedAt",
                    type: "timestamp with time zone",
                    default: "CURRENT_TIMESTAMP",
                    onUpdate: "CURRENT_TIMESTAMP",
                },
            ],
        }), true);

        // Create 'resources' table
        await queryRunner.createTable(new Table({
            name: "resources",
            columns: [
                {
                    name: "id",
                    type: "uuid", // As defined in entity
                    isPrimary: true,
                    isGenerated: true, // For UUID, this means it will be generated by TypeORM or DB extension
                    generationStrategy: "uuid",
                },
                {
                    name: "title",
                    type: "varchar",
                },
                {
                    name: "type",
                    type: "enum",
                    enumName: "resource_type_enum", // Optional: specify enum name for DB
                    enum: ['text', 'image_url', 'video_url', 'markdown', 'quiz_ref', '3d_model_url'],
                },
                {
                    name: "content_data",
                    type: "jsonb",
                    isNullable: true,
                },
                {
                    name: "teacherId",
                    type: "int", // Assuming User ID is int
                    isNullable: true, // To allow SET NULL on user deletion
                },
                {
                    name: "createdAt",
                    type: "timestamp with time zone",
                    default: "CURRENT_TIMESTAMP",
                },
                {
                    name: "updatedAt",
                    type: "timestamp with time zone",
                    default: "CURRENT_TIMESTAMP",
                    onUpdate: "CURRENT_TIMESTAMP",
                },
            ],
        }), true);

        // Add foreign key from 'resources' to 'users'
        await queryRunner.createForeignKey("resources", new TableForeignKey({
            columnNames: ["teacherId"],
            referencedColumnNames: ["id"],
            referencedTableName: "user", // Assuming user table is named 'user' (default by TypeORM)
            onDelete: "SET NULL", // As per entity definition
        }));

        // Create 'resource_tags' join table
        await queryRunner.createTable(new Table({
            name: "resource_tags",
            columns: [
                {
                    name: "resourceId",
                    type: "uuid",
                },
                {
                    name: "tagId",
                    type: "int",
                },
            ],
            foreignKeys: [
                new TableForeignKey({
                    columnNames: ["resourceId"],
                    referencedColumnNames: ["id"],
                    referencedTableName: "resources",
                    onDelete: "CASCADE", // If a resource is deleted, remove its tags associations
                }),
                new TableForeignKey({
                    columnNames: ["tagId"],
                    referencedColumnNames: ["id"],
                    referencedTableName: "tags",
                    onDelete: "CASCADE", // If a tag is deleted, remove its associations from resources
                }),
            ],
            primaryKeys: [{ columnNames: ["resourceId", "tagId"] }] // Composite primary key
        }), true);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.dropTable("resource_tags");
        // Drop foreign key from 'resources' to 'users' - need to get its generated name or define one
        // For simplicity, we might rely on table drop order or manually find/name the FK.
        // Example: await queryRunner.dropForeignKey("resources", "FK_teacher_resource");
        // It's safer to drop tables in reverse order of creation or if FKs are correctly named.
        await queryRunner.dropTable("resources");
        await queryRunner.dropTable("tags");
        // If enum type was explicitly named and created (PostgreSQL specific for CREATE TYPE ... AS ENUM)
        // await queryRunner.query("DROP TYPE IF EXISTS resource_type_enum;");
    }
}
